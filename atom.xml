<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>董春林的博客</title>
  <subtitle>慎独、沉淀、坚持、绽放</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.dongchunlin.com/"/>
  <updated>2017-07-24T09:28:25.488Z</updated>
  <id>http://www.dongchunlin.com/</id>
  
  <author>
    <name>董春林</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android模拟器启动失败之emulator错误集锦</title>
    <link href="http://www.dongchunlin.com/2017/07/24/emulator-error-fail/"/>
    <id>http://www.dongchunlin.com/2017/07/24/emulator-error-fail/</id>
    <published>2017-07-24T08:34:05.000Z</published>
    <updated>2017-07-24T09:28:25.488Z</updated>
    
    <content type="html"><![CDATA[<hr>
<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>这几天在一台新电脑上面搭建Android环境，在启动模拟器的时候，打死启动不了啊，尼玛……这是咋了。<br>下面是问题：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ERROR:./android/qt/qt_setup.cpp:<span class="number">28</span>:Qt library not found at ..\emulator\lib64\qt\lib</div><div class="line">Could not launch <span class="string">'./qemu/windows-x86_64/qemu-system-i386.exe'</span>: No such file or directory</div></pre></td></tr></table></figure></p>
<p>见名之意？那他的意思是找不到文件或者目录，扯淡啊，我的sdk目录下明明有这个文件。<br><a id="more"></a></p>
<h2 id="资料查询"><a href="#资料查询" class="headerlink" title="资料查询"></a>资料查询</h2><p>于是乎，开始了一波的网络搜集（主要是Google search、stackoverflow）。<br>有这样说的：  </p>
<ol>
<li>没有安装emulator：<br>在Tools &gt; Android &gt; SDK Manager &gt; SDK Tools，勾选Android Emulator安装。<br><img src="http://i.imgur.com/3GWmJq6.png" alt="SDK Manager">  </li>
<li>Emulator版本问题：<br>话说是Emulator更新到26.1.2版本以后,，，模拟器工具已经不在tools目录下了，而是改到了sdk根目录。所以，就得修改tools目录的配置。<br>要将该目录  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">C:\AndroidSDK\tools</div></pre></td></tr></table></figure>
</li>
</ol>
<p>改为：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">C:\AndroidSDK\emulator</div></pre></td></tr></table></figure></p>
<p>上述只是一个例子，你的sdk可能是其他盘其他目录，总之就是要在你的环境变量path里面将 <em>%ANDROID_HOME%\tools;</em> 改为 %ANDROID_HOME%\emulator;  或者将之前的 tools排在 emulator之后。  </p>
<ol>
<li>Emulator目录下启动：<br>还有种说法，说是你要到emulator目录下通过命令（emulator -avd [name]）启动模拟器。我在第一时间是排除此说法的，这怎么可能，分明AndroidStudio就可以直接启动嘛！！不过，最后我也尝试了此类不靠谱说法。让我哭一会~~（后面讲的我遇到的奇葩问题你就理解了）。</li>
</ol>
<h2 id="我的问题"><a href="#我的问题" class="headerlink" title="我的问题"></a>我的问题</h2><p>文章一开始也讲到了，我是在一台新电脑上面搭建。唉（升调），我们怎么都没问题。听我慢慢讲~<br>我遇到上述问题，试了各种方法后，无奈，那就用Genymotion试试呗。好，开始安装~<br>尼玛啊，什么鬼！我折腾了半天，居然卡在了启动界面，无任何提示。重复卸载安装，上网查询此类问题，均是无果。<br>我觉得我都要崩溃了啊！<br>再换个模拟器试试，无意中看到了一个叫“夜神”的模拟器。下载安装，一套下来，我真要哭了。“您的显卡驱动版本太低”，这又是什么鬼！！<br>好吧，好在有提示了，那就升级显卡启动试试。<br>最终，最终的最终，终于搞定了啊。太尼玛不容易了，试了试Android自带模拟器好了、Genymotion也正常了。<br>真是想不到，这尼玛问题，居然是显卡驱动版本太低，我也是醉了。只能说，某些软件做的也不行啊，连个提示都没有，还不如一个小众软件（此处给夜神模拟器一个赞）。  </p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>遇到此问题时：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ERROR:./android/qt/qt_setup.cpp:<span class="number">28</span>:Qt library not found at ..\emulator\lib64\qt\lib</div><div class="line">Could not launch <span class="string">'./qemu/windows-x86_64/qemu-system-i386.exe'</span>: No such file or directory</div></pre></td></tr></table></figure></p>
<p>试试以下方法：  </p>
<ol>
<li>没有安装emulator：<br>在Tools &gt; Android &gt; SDK Manager &gt; SDK Tools，勾选Android Emulator安装。<br><img src="http://i.imgur.com/3GWmJq6.png" alt="SDK Manager">  </li>
<li>Emulator版本问题：<br>将该目录  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">C:\AndroidSDK\tools</div></pre></td></tr></table></figure>
</li>
</ol>
<p>改为：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">C:\AndroidSDK\emulator</div></pre></td></tr></table></figure></p>
<p>在你的环境变量path里面将 <em>%ANDROID_HOME%\tools;</em> 改为 %ANDROID_HOME%\emulator;  或者将之前的 tools排在 emulator之后。  </p>
<ol>
<li>更新显卡驱动：<br>更新你的显卡驱动 </li>
</ol>
]]></content>
    
    <summary type="html">
    
      Android模拟器启动失败之emulator错误集锦
    
    </summary>
    
      <category term="Android" scheme="http://www.dongchunlin.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://www.dongchunlin.com/tags/Android/"/>
    
      <category term="emulator" scheme="http://www.dongchunlin.com/tags/emulator/"/>
    
      <category term="问题" scheme="http://www.dongchunlin.com/tags/%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin学习之配置准备</title>
    <link href="http://www.dongchunlin.com/2017/07/19/KotlinStudy-config/"/>
    <id>http://www.dongchunlin.com/2017/07/19/KotlinStudy-config/</id>
    <published>2017-07-19T02:40:04.000Z</published>
    <updated>2017-07-19T08:01:57.690Z</updated>
    
    <content type="html"><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　Kotlin 是一个基于 JVM 的新的编程语言，由 JetBrains 开发，起源来自JetBrains的圣彼得堡团队，名称取自圣彼得堡附近的一个小岛(Kotlin Island)。Kotlin可以编译成Java字节码，也可以编译成JavaScript，方便在没有JVM的设备上运行。JetBrains，作为目前广受欢迎的Java IDE IntelliJ 的提供商，在 Apache 许可下已经开源其Kotlin 编程语言。2017年5月18日的I/O大会上谷歌宣布Kotlin正式成为Android的官方语言。<br><a id="more"></a><br><img src="http://i.imgur.com/lPaKAmV.png" alt="Google I/O 2017"></p>
<h2 id="安装-Kotlin-插件"><a href="#安装-Kotlin-插件" class="headerlink" title="安装 Kotlin 插件"></a>安装 Kotlin 插件</h2><p>　　Android Studio 从 3.0（preview）版本开始将内置安装 Kotlin 插件。如果你正在使用的是早期版本， 需要通过 File | Settings | Plugins | Install JetBrains plugin… 搜索并安装 Kotlin 插件。 在 Android Studio 欢迎界面中，可以通过 Configure | Plugins | Install JetBrains plugin… 。 安装完成后需要重新启动 Android Studio。<br>　　也可以直接下载 Android Studio3.0预览版  <a href="https://developer.android.com/studio/preview/index.html" title="Android Studio 预览版" target="_blank" rel="external">https://developer.android.com/studio/preview/index.html</a><br>　　可以在安装有稳定版的同时安装 Android Studio 预览版并在这两个版本中开发同一应用。如果在 Windows 上安装了 Android Studio 2.3 稳定版和 Android Studio 2.4 预览版，那么，每个版本的设置分别存储在类似下面这样的目录中：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">C:\Users\***\.AndroidStudio2.3\    </div><div class="line">C:\Users\***\.AndroidStudioPreview2.4\</div></pre></td></tr></table></figure></p>
<p>在 Mac 上，这些目录位于 ~/Library/Preferences/ 和 ~/Library/Application Support/ 中。 在 Linux 上，这些目录位于主目录中。</p>
<p>在下载 Android Studio 预览版之后，只需按照下述方法将此应用与其他任何版本的 Android Studio 一起保存即可。</p>
<p><strong>Windows：</strong></p>
<p>解压缩 ZIP 文件。<br>将生成的文件夹重命名为类似 “Android Studio Preview” 这样的唯一名称。<br>将此文件夹移动到某个永久性位置，例如 C:\Program Files\Android\ 中现有 Android Studio 安装的旁边。<br>在 C:\Program Files\Android\Android Studio Preview\bin\ 内，启动 studio64.exe（或者，如果运行的是 32 位计算机，则启动 studio.exe）。<br>为了能够在“开始”菜单中访问预览版，请右键点击 studio64.exe 并点击固定到开始菜单。   </p>
<p><strong>Mac：</strong></p>
<p>解压缩 ZIP 文件。<br>注： 如果下载的是版本 2.3 或更低版本，则应用名称不包含版本号，因此，在将新版本移动到应用目录中之前，必须先重命名该文件。否则，可能会覆盖现有版本的 Android Studio。</p>
<p>将应用文件拖放到 Applications 文件夹中。<br>现在启动该应用。  </p>
<p><strong>Linux：</strong></p>
<p>解压缩 ZIP 文件。<br>将生成的文件夹重命名为类似“android-studio-preview”这样的唯一名称。<br>将该文件夹移动到安装有稳定版的位置，例如 /usr/local/ 中（对于用户个人资料）或者 /opt/ 中（对于共享用户）。<br>打开终端，导航至 android-studio-preview/bin/ 并执行 studio.sh。<br>要使预览版出现在应用列表中，请从 Android Studio 菜单栏中选择 Tools &gt; Create Desktop Entry。</p>
<h2 id="创建新工程"><a href="#创建新工程" class="headerlink" title="创建新工程"></a>创建新工程</h2><p>首先，创建新的工程。选择 Start a new Android Studio project 或者 File | New project。 根据弹出的对话框提示进行操作。 为新工程命名，选择已安装的 Android SDK 版本。实际上大多数选项均有默认值 ，只需要按几次“回车”键即可。   </p>
<p>命名工程:<br><img src="http://i.imgur.com/3tDVJLK.png" alt="命名工程"><br>Android Studio 3.0 在当前对话框中提供启用 Kotlin 支持的选项，勾选后可以跳过 “配置 Kotlin 工程（Configuring Kotlin in the project）”的步骤。</p>
<p>选择 Android 版本:<br><img src="http://i.imgur.com/SpUiJ2m.png" alt="选择Android版本"></p>
<p>选择需要创建的 Activity 样式:<br><img src="http://i.imgur.com/TPBuGil.png" alt="选择Activity样式"></p>
<p>命名该 Activity:<br><img src="http://i.imgur.com/pp0gtSz.png" alt="命名Activity"><br>在 Android Studio 3.0 中，可以选择使用 Kotlin 创建 activity，因此也不需要“将Java 代码转换为 Kotlin（Converting Java code to Kotlin）”这一步骤。早期版本中则会先使用 Java 创建 activity，然后再使用自动转换工具进行转换。</p>
<p>一般而言，着手使用 Kotlin 的最便捷方式，无疑是将 Java 代码自动转换为 Kotlin。 值得一提的是，与其为了使用新的方式表达旧的模式而去查阅文档， 不如直接使用 Java 编写代码，再复制粘贴到 Kotlin 文件中，IntelliJ IDEA（或Android Studio）会提示需要转换代码。</p>
<h2 id="将-Java-代码转换为-Kotlin"><a href="#将-Java-代码转换为-Kotlin" class="headerlink" title="将 Java 代码转换为 Kotlin"></a>将 Java 代码转换为 Kotlin</h2><p>打开MainActivity.java文件，使用 Convert Java File to Kotlin File 命令。使用该命令的方式有如下几种， 强烈推荐 Find Action（快捷键control+shift+A），输入相应的命令名称（见下方截图）即可。 同样也可以通过菜单栏依次调出 Code | Convert Java File to Kotlin File 或使用快捷键（菜单栏入口可见）完成操作。<br><img src="http://i.imgur.com/w8fxwDK.png" alt=" Find Action窗口"><br><img src="http://i.imgur.com/REhwva9.png" alt="菜单栏调出"></p>
<p>转换完成后即可看到使用 Kotlin 编写的 activity：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">class MainActivity : AppCompatActivity() &#123;</div><div class="line"></div><div class="line">    override fun onCreate(savedInstanceState: Bundle?) &#123;</div><div class="line">        super.onCreate(savedInstanceState)</div><div class="line">        setContentView(R.layout.activity_main)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="工程中配置-Kotlin"><a href="#工程中配置-Kotlin" class="headerlink" title="工程中配置 Kotlin"></a>工程中配置 Kotlin</h2><p>在开始编辑此文件时，Android Studio 会提示当前工程还未配置 Kotlin，根据提示完成操作即可；或者可以在菜单栏中选择 Tools &gt;&gt;    Kotlin &gt;&gt; Configure Kotlin in Project。<br>选择配置时有如下对话框，选择已安装的最新版本即可。<br><img src="http://i.imgur.com/j4tSWqB.png" alt="配置对话框"></p>
<p>Kotlin 配置完成后，应用程序的 build.gradle 文件会更新。 你能看到新增了 apply plugin: ‘kotlin-android’ 及其依赖。<br><img src="http://i.imgur.com/BtPLWu2.png" alt="build.gradle文件"></p>
<p>同步工程，在提示框中点击“立即同步（Sync Now）”或者使用 Sync Project with Gradle Files命令。<br><img src="http://i.imgur.com/GH3iz1s.png" alt=""></p>
<p>最后构建应用程序，在虚拟机或连接的设备上运行。 所有这些工作与 Java 并无区别。 你可以发布应用程序，并以类似于使用 Java 编写的 Android 应用程序的方式进行签名。</p>
]]></content>
    
    <summary type="html">
    
      开始学习Kotlin的准备
    
    </summary>
    
      <category term="Kotlin" scheme="http://www.dongchunlin.com/categories/Kotlin/"/>
    
    
      <category term="Kotlin" scheme="http://www.dongchunlin.com/tags/Kotlin/"/>
    
      <category term="学习笔记" scheme="http://www.dongchunlin.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+GitHub搭建个人域名博客（三）</title>
    <link href="http://www.dongchunlin.com/2017/06/22/Hexo+GitHub+blog_03/"/>
    <id>http://www.dongchunlin.com/2017/06/22/Hexo+GitHub+blog_03/</id>
    <published>2017-06-22T06:52:07.000Z</published>
    <updated>2017-07-19T02:45:28.483Z</updated>
    
    <content type="html"><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​    本文是Hexo+GitHub搭建个人域名博客的第三篇，带你将个人域名绑定到GitHub博客地址</p>
<a id="more"></a>
<p>​    本文基于已经将个人博客部署在GitHub基础之上，如果还没有搭建的请先移步这里：<br>　　<a href="http://www.dongchunlin.com/2017/06/22/Hexo+GitHub+blog_02/">http://www.dongchunlin.com/2017/06/22/Hexo+GitHub+blog_02/</a> </p>
<hr>
<h2 id="添加域名解析"><a href="#添加域名解析" class="headerlink" title="添加域名解析"></a>添加域名解析</h2><blockquote>
<p>想要绑定个性域名，首先得有一个域名喽，这里我就不介绍怎么申请域名了，还没有域名的自行去申请就行了。本文例子是在阿里云申请的域名。</p>
</blockquote>
<p>　　首先进入阿里云控制台，在你的域名列表里选择一个你要绑定的域名，直接点击后面的【解析】，如图：</p>
<p>　　<img src="http://i.imgur.com/VBQl8C4.png" alt=""></p>
<p>　　进入解析界面：</p>
<p>　　<img src="http://i.imgur.com/5x8bNrG.png" alt=""></p>
<p>　　点击【添加解析】按钮，输入如图两条记录，注意的是记录类型要选“CNAME”（CNAME记录：<br>    如果将域名指向一个域名，实现与被指向域名相同的访问效果，需要增加CNAME记录）。 主机记录：第一条输入“@”，第二条输入”www”。记录值都是填GitHub博客域名，例如：zhangsan.github.io。选择保存完成个人域名向个人博客的映射。添加解析后，在浏览器输入我们新注册的域名：</p>
<p>　　<img src="http://i.imgur.com/sj3rm4x.png" alt=""></p>
<p>　　咦！！！404？  哈哈，不要着急，听我来说。仔细看这是GitHub报的404，说明我们的域名已经成功映射到了GitHub网站，但是找不到我们的博客位置，所以我们还需要做的就是将个人博客映射到个人域名。</p>
<h2 id="本地部署映射"><a href="#本地部署映射" class="headerlink" title="本地部署映射"></a>本地部署映射</h2><p>　　进入本地blog&gt;source文件夹下，新建名为【CNAME】的文件，不要后缀名（ps:可以新建txt,输入名字CNAME，把后缀txt删掉即可），进入编辑，里面填写你的域名，例如“zhangsan.com”，注意，不需要http、www，保存。</p>
<p>　　好了，我们开始部署：</p>
<p>　　生成本地静态文件：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo g</div></pre></td></tr></table></figure>
<p>　　部署到远端：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo d</div></pre></td></tr></table></figure>
<p>　　哦了，现在开始用你的域名访问试试吧。</p>
<h2 id="我的博客事例"><a href="#我的博客事例" class="headerlink" title="我的博客事例"></a>我的博客事例</h2><p>　　<font size="4"><a href="http://www.dongchunlin.com">http://www.dongchunlin.com</a></font></p>
]]></content>
    
    <summary type="html">
    
      手把手教你从零搭建个人博客
    
    </summary>
    
      <category term="Hexo教程" scheme="http://www.dongchunlin.com/categories/Hexo%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Hexo搭建" scheme="http://www.dongchunlin.com/tags/Hexo%E6%90%AD%E5%BB%BA/"/>
    
      <category term="环境搭建" scheme="http://www.dongchunlin.com/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+GitHub搭建个人域名博客（二）</title>
    <link href="http://www.dongchunlin.com/2017/06/22/Hexo+GitHub+blog_02/"/>
    <id>http://www.dongchunlin.com/2017/06/22/Hexo+GitHub+blog_02/</id>
    <published>2017-06-22T06:51:58.000Z</published>
    <updated>2017-07-15T19:16:00.000Z</updated>
    
    <content type="html"><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​    本文是Hexo+GitHub搭建个人域名博客的第二篇，将带你将本地博客部署到GitHub</p>
<a id="more"></a>
<p>​    本文基于已经在本地搭建好Hexo的基础之上，如果还没有搭建的请先移步这里：<br>　　<a href="http://www.dongchunlin.com/2017/06/21/Hexo+GitHub+blog_01/">http://www.dongchunlin.com/2017/06/21/Hexo+GitHub+blog_01/</a> </p>
<hr>
<h2 id="新建GitHub仓库"><a href="#新建GitHub仓库" class="headerlink" title="新建GitHub仓库"></a>新建GitHub仓库</h2><blockquote>
<p>首先得有个GitHub账号，这里就不介绍怎么申请账号了哈，没有的小伙伴自己先申请一个。</p>
</blockquote>
<p>　　登录账号后，在头像左侧，点击“+”号旁边的下三角，选择“New repository” 新建仓库，如图：<br>​<br>　　<img src="http://i.imgur.com/tFuZMH4.png" alt=""></p>
<p>　　填写以下如图信息：</p>
<p>　　<img src="http://i.imgur.com/wKQbnrZ.png" alt=""></p>
<p>　　<font color="red">注意了：如果你的Owner是 XXX，那么Repository name就是 XXX.github.io 。</font></p>
<p>　　关于「Repository name」的填写，格式是username.github.io，其中username是你的用户名，即「Owner」默认的那个账户的名字，如图示我应该填写的应该是zhangsan.github.io这样的。填写好了之后会提示没有错误的话，在输入框的旁边会有个绿色的勾勾，然后就可以点击「Create repository」提交即可。另外，「Description」，关于这个仓库的一些描述，这里是可选的，你可以填上对你要部署的博客的一些简短的描述。还有要注意的一点就是「Public」和「Private」，默认保持「Public」即可。</p>
<hr>
<h2 id="提交部署"><a href="#提交部署" class="headerlink" title="提交部署"></a>提交部署</h2><p>　　这一步恐怕是最关键的，毕竟放在本地预览也不是我们最想要的效果。等部署到GitHub后，我们就可以通过　<a href="http://username.github.io" target="_blank" rel="external">http://username.github.io</a>　访问了。下面，咱们首先要说一下部署到GitHub的原理了：</p>
<p>　　1.我们刚刚在Github上创建的那个仓库repo（zhangsan.github.io）一个最大的特点就是其master中的html静态文件，可以通过链接　<a href="http://zhangsan.github.io" target="_blank" rel="external">http://zhangsan.github.io</a>　来直接访问。</p>
<p>　　2.每次新建文章的时候，都是存在本地source/_posts目录下，就是md文件。</p>
<p>　　3.Hexo -g 会将上述md文件生成一个静态网站（第一次会生成一个public目录），这个静态文件可以直接访问。</p>
<p>　　4.需要将hexo生成的静态网站，提交(git commit)到github上。</p>
<p> 　　明白了原理，现在咱们仔细介绍两种不同的部署方法。</p>
<ol>
<li><font size="4"><strong>使用git命令行部署</strong></font>

</li>
</ol>
<p>　　首先将远程仓库克隆到本地，</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> e:/hexo/blog</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> git <span class="built_in">clone</span> https://github.com/zhangsan/zhangsan.github.io.git .deploy/zhangsan.github.io</div></pre></td></tr></table></figure>
<p>　　上面名字换成你自己的。现在blog根目录下会多出一个文件夹（zhangsan.github.io）。根据上面咱们将的原理，下面需要将“public”文件夹的文件全部复制到文件夹“zhangsan.github.io”。最终就是将“zhangsan.github.io”文件夹下的文件部署到GitHub。</p>
<p>　　（1）首先生成本地静态文件：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo generate</div></pre></td></tr></table></figure>
<p>　　（2）进入该目录下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> zhangsan.github.io</div></pre></td></tr></table></figure>
<p>　　（3）下面就是利用git命令提交了：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git add.</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git commit -m <span class="string">"描述"</span></div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push origin master</div></pre></td></tr></table></figure>
<p>　　好了，现在就可以通过<a href="http://zhangsan.github.io访问了。以后新建文章、更新文章，只需要上面（1）（2）（3）三步就行啦。" target="_blank" rel="external">http://zhangsan.github.io访问了。以后新建文章、更新文章，只需要上面（1）（2）（3）三步就行啦。</a></p>
<ol>
<li><font size="4"><strong>使用hexo deploy部署</strong></font>

</li>
</ol>
<p>　　有没有感觉上面的方法步骤稍微多一些，现在咱们介绍一种方便点的方法，使用hexo deploy部署。</p>
<p>　　首先，我们需要对blog根目录下的_config.xml文件做如下修改：</p>
<p>　　<code>deploy:</code></p>
<p>　　　<code>type: git</code></p>
<p>　　　<code>repo: git@github.com:zhangsan/zhangsan.github.io.git</code></p>
<p>　　　<code>brash: master</code></p>
<p>　　注意上面冒号后面要有空格。</p>
<p>　　安装一个扩展：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>
<p>　　<img src="http://i.imgur.com/gT6NHNt.png" alt=""></p>
<p>　  （1）首先生成本地静态文件：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo generate</div></pre></td></tr></table></figure>
<p>　　（2）然后执行命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo d</div></pre></td></tr></table></figure>
<p>　　这里首次会弹框让你输入你的GitHub账号密码，输入即可。然后需要等待，别急，命令行会出现一堆信息，最后一行是： INFO Deploy done:git 。</p>
<p>　　好了，现在可以通过　<a href="http://zhangsan.github.io" target="_blank" rel="external">http://zhangsan.github.io</a>　访问了。以后新建文章、更新文章，只需要（1）（2）两步就行啦。是不是简单了很多呢！</p>
<hr>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>　　怎么样，感觉还不错吧。现在咱们可以直接通过　<a href="http://zhangsan.github.io" target="_blank" rel="external">http://zhangsan.github.io</a>　搞起个人博客了。但是还木有绑定个人域名哦，想绑定个人域名的，那就请移步这里吧：</p>
<p>　　<font size="3"><a href="http://www.dongchunlin.com/2017/06/22/Hexo+GitHub+blog_03/">http://www.dongchunlin.com/2017/06/22/Hexo+GitHub+blog_03/</a></font></p>
<p>​    </p>
]]></content>
    
    <summary type="html">
    
      手把手教你从零搭建个人博客
    
    </summary>
    
      <category term="Hexo教程" scheme="http://www.dongchunlin.com/categories/Hexo%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Hexo搭建" scheme="http://www.dongchunlin.com/tags/Hexo%E6%90%AD%E5%BB%BA/"/>
    
      <category term="环境搭建" scheme="http://www.dongchunlin.com/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+GitHub搭建个人域名博客(一)</title>
    <link href="http://www.dongchunlin.com/2017/06/21/Hexo+GitHub+blog_01/"/>
    <id>http://www.dongchunlin.com/2017/06/21/Hexo+GitHub+blog_01/</id>
    <published>2017-06-21T08:14:37.000Z</published>
    <updated>2017-07-15T19:37:52.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​    本文是Hexo+GitHub搭建个人域名博客的第一篇，初始化在本地搭建Hexo、简单学习Hexo常用命令、本地写第一篇文章并预览、配置主题。</p>
<a id="more"></a>
<h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><ul>
<li><p>下载Git： <a href="https://git-scm.com/downloads" target="_blank" rel="external">https://git-scm.com/downloads</a></p>
<p>选择合适的版本下载然后安装，我们稍后将会用上。</p>
</li>
</ul>
<h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><ul>
<li><p>下载Node.js： <a href="https://nodejs.org/en/download/" target="_blank" rel="external">https://nodejs.org/en/download/</a></p>
<p>因为Hexo是一款基于<em>Node.js</em>的静态博客框架，所以我们还需要安装好它。</p>
<p>同样选择对应自己电脑的版本下载安装。</p>
</li>
</ul>
<h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><ul>
<li><p>~~</p>
<p>哈哈，折腾了一小会，我们今天的主角登场了。</p>
<p>还记得刚才安装的Git吗，下面咱们就开始用起来了。</p>
<p>先打开Git Bash，输入执行这条命令安装Hexo</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-cli -g</div></pre></td></tr></table></figure>
<p>这里不要着急，稍等一会，就会出现下面信息：</p>
<p> <img src="http://i.imgur.com/ALBgH5f.png" alt=""></p>
<p>验证一下有没有安装成功，输入以下命令查看Hexo的版本信息：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo -v</div></pre></td></tr></table></figure>
<p>出现以下类似信息就说明安装成功了！</p>
<p><img src="http://i.imgur.com/4MVUEGU.png" alt=""></p>
</li>
</ul>
<h2 id="Hexo的使用"><a href="#Hexo的使用" class="headerlink" title="Hexo的使用"></a>Hexo的使用</h2><h3 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h3><p>　　首先，我们在E盘根目录下建一个文件夹（blog），将它初始化为我们的博客目录：。<strong>ps:本文的操作都是在E盘下进行的，小伙伴们可以自行选择。</strong></p>
<p>　　下面有两种方法进入下一步操作：</p>
<pre><code>（1）进入刚才新建的：“blog”文件夹， 右键》选择“Git Bash Here”

（2）或者先打开Git Bash，执行命令  `cd E:/blog`
</code></pre><h3 id="执行命令初始化"><a href="#执行命令初始化" class="headerlink" title="执行命令初始化"></a>执行命令初始化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo init</div></pre></td></tr></table></figure>
<p>　　这里别着急，喝口水等一下~~出现如下信息说明初始化成功！</p>
<p>　　INFO  Start blogging with Hexo!</p>
<h3 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install</div></pre></td></tr></table></figure>
<p>　　安装成功出现：</p>
<p>　　<img src="http://i.imgur.com/zFwagS8.png" alt=""></p>
<p>　　下面看一下目录结构：</p>
<p>　　<img src="http://i.imgur.com/xj5FPDb.png" alt=""></p>
<p>　　好了至此Hexo已将安装部署完了，不要着急，接下来有必要学习一下Heox常用命令。搞起来~~</p>
<h2 id="Hexo常见命令"><a href="#Hexo常见命令" class="headerlink" title="Hexo常见命令"></a>Hexo常见命令</h2><h3 id="常见命令"><a href="#常见命令" class="headerlink" title="常见命令"></a>常见命令</h3><ul>
<li><p>hexo generate (hexo g) ##》生成静态文件，会在当前目录下生成一个新的叫做public的文件夹</p>
</li>
<li><p>hexo server (hexo s) ##》启动本地web服务，用于博客的预览</p>
</li>
<li><p>hexo deploy (hexo d) ##》部署播客到远端（比如github, heroku等平台）</p>
</li>
<li><p>hexo new “postName” ##》新建文章</p>
</li>
<li><p>hexo new page “pageName” ##》新建页面</p>
</li>
</ul>
<h3 id="常用简写"><a href="#常用简写" class="headerlink" title="常用简写"></a>常用简写</h3><p>　　hexo n == hexo new</p>
<p>　　hexo g == hexo generate</p>
<p>　　hexo s == hexo server</p>
<p>　　hexo d == hexo deploy</p>
<h3 id="常用组合"><a href="#常用组合" class="headerlink" title="常用组合"></a>常用组合</h3><p>　　hexo d -g ##》生成部署</p>
<p>　　hexo s -g ##》生成预览</p>
<p>　　很简单的几个命令，用几次就记住了，下面激动人心的时刻到了，咱们写篇文章试试~~</p>
<h2 id="写文章预览"><a href="#写文章预览" class="headerlink" title="写文章预览"></a>写文章预览</h2><h3 id="写新文章"><a href="#写新文章" class="headerlink" title="写新文章"></a>写新文章</h3><p>　　还是在刚才的blog根目录下，写篇名字“FirstArticle”的文章：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo <span class="keyword">new</span> <span class="string">"FirstArticle"</span></div></pre></td></tr></table></figure>
<p>　　出现以下信息：</p>
<p>　　<img src="http://i.imgur.com/PC8Cpcy.png" alt=""></p>
<p>　　我们的文章在该目录下：E:\blog\source_posts\FirstArticle<br>　　<br>　　我们找到这个文件之后用Markdown编辑器或其他文本编辑器打开，我们会看到里面已经有内容了：</p>
<p>　　<img src="http://i.imgur.com/doeWSha.png" alt=""></p>
<p>　　这是由模板生成的Front-Matter，在—前面的是文章的一些基本信息例如标题、日期及标签，还能添加其他一些选项如分类，我们后面有机会再来说说。</p>
<p>　　我们的文章内容要写在—下面，随便写点什么来看看效果吧：</p>
<p>　　<img src="http://i.imgur.com/SPyv0Y0.png" alt=""></p>
<h3 id="生成页面"><a href="#生成页面" class="headerlink" title="生成页面"></a>生成页面</h3><p>　　执行命令，生成静态页面（.md到.html）：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo generate</div></pre></td></tr></table></figure>
<p>　　出现一堆信息：</p>
<p>　　<img src="http://i.imgur.com/lSnthe5.png" alt=""></p>
<p>　　好了，是不是很简单，我们的博客页面已经生成了，下面搞起预览！</p>
<h3 id="页面预览"><a href="#页面预览" class="headerlink" title="页面预览"></a>页面预览</h3><p>　　执行命令：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo server</div></pre></td></tr></table></figure>
<p>　　看到如下信息（我用的简写哦）：</p>
<p>　　<img src="http://i.imgur.com/IWT1dZw.png" alt=""></p>
<p>　　好了，哈哈，终于搞完了，现在打开浏览器访问<a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a>试试吧！    </p>
<h2 id="配置主题"><a href="#配置主题" class="headerlink" title="配置主题"></a>配置主题</h2><p>　　在这个看脸的时代，没有一个好的门面怎么行呢，哈哈。下面带你找好的主题并更换。</p>
<p>　　咱们暂且找找GitHub上排名靠前的主题，如图：</p>
<p>　　<img src="http://i.imgur.com/Q9TzcEE.png" alt=""></p>
<p>　　好了，就先看看第一个吧，点击进入，复制链接，如图：</p>
<p>　　<img src="http://i.imgur.com/HmFvFiD.png" alt=""></p>
<p>　　回到本地blog文件夹，在根目录下有个themes文件夹，对了，这里就是存放主题的地方。现在只有一个默认的主题 landscape。我们下载刚才找到的主题：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone https:<span class="comment">//github.com/litten/hexo-theme-yilia.git</span></div></pre></td></tr></table></figure>
<p>　　等待下载完了，咱们再看看themes文件下是不是多了个yilia文件夹，这就是刚下载完的主题。</p>
<p>　　下载完更换就很简单了，需要配置一下blog文件夹下的_config.yml文件。</p>
<p>　　打开该文件，找到theme，将默认的改成yilia即可。如图：</p>
<pre><code>![](http://i.imgur.com/OrA8fud.png)
</code></pre><p>　　重新部署下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo g</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo s</div></pre></td></tr></table></figure>
<p>　　好了，就是这么简单，现在重新打开 <a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a> 试试吧！</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>　　终于搞完了，有没有很欣慰啊，哈哈。别忘了，咱们的最终目的是要放到远端访问哦。歇一会，咱们继续搞起。下一篇将带你将本地博客部署到远端GitHub，请移步这里：</p>
<p>　　<font size="3"><a href="http://www.dongchunlin.com/2017/06/22/Hexo+GitHub+blog_02/">http://www.dongchunlin.com/2017/06/22/Hexo+GitHub+blog_02/</a></font></p>
]]></content>
    
    <summary type="html">
    
      手把手教你从零搭建个人博客
    
    </summary>
    
      <category term="Hexo教程" scheme="http://www.dongchunlin.com/categories/Hexo%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Hexo搭建" scheme="http://www.dongchunlin.com/tags/Hexo%E6%90%AD%E5%BB%BA/"/>
    
      <category term="环境搭建" scheme="http://www.dongchunlin.com/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+GitHub搭建个人域名博客</title>
    <link href="http://www.dongchunlin.com/2017/06/21/Hexo+GitHub+blog/"/>
    <id>http://www.dongchunlin.com/2017/06/21/Hexo+GitHub+blog/</id>
    <published>2017-06-21T07:14:37.000Z</published>
    <updated>2017-07-15T19:39:44.000Z</updated>
    
    <content type="html"><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　这几天刚搭建了个人博客，打算把在其他平台的文章归置到一起，自己做个备份。本文作为一个记录，也给大家一份参考，避免不必要的踩坑。</p>
<p>　　本文用Windows机器进行实际操作，其他系统差别不大，后续会加一篇文章介绍mac系统下的搭建过程。 </p>
<a id="more"></a>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>　　由于篇幅关系，以及个人需求，本次搭建过程将分为三篇文章。 </p>
<h3 id="第一篇"><a href="#第一篇" class="headerlink" title="第一篇"></a>第一篇</h3><p>​    实现安装Hexo，在本地发布预览文章</p>
<p>　　点击这里： </p>
<p>　　<a href="http://www.dongchunlin.com/2017/06/21/Hexo+GitHub+blog_01/">http://www.dongchunlin.com/2017/06/21/Hexo+GitHub+blog_01/</a></p>
<h3 id="第二篇"><a href="#第二篇" class="headerlink" title="第二篇"></a>第二篇</h3><p>​    介绍简单配置、主题设置、部署到GitHub，实现远端访问</p>
<p>　　点击这里： </p>
<p>　　<a href="http://www.dongchunlin.com/2017/06/22/Hexo+GitHub+blog_02/">http://www.dongchunlin.com/2017/06/22/Hexo+GitHub+blog_02/</a></p>
<h3 id="第三篇"><a href="#第三篇" class="headerlink" title="第三篇"></a>第三篇</h3><p>​    教你绑定域名，实现个人域名的访问</p>
<p>　　点击这里： </p>
<p>　　<a href="http://www.dongchunlin.com/2017/06/22/Hexo+GitHub+blog_03/">http://www.dongchunlin.com/2017/06/22/Hexo+GitHub+blog_03/</a></p>
]]></content>
    
    <summary type="html">
    
      手把手教你从零搭建个人博客
    
    </summary>
    
      <category term="Hexo教程" scheme="http://www.dongchunlin.com/categories/Hexo%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Hexo搭建" scheme="http://www.dongchunlin.com/tags/Hexo%E6%90%AD%E5%BB%BA/"/>
    
      <category term="环境搭建" scheme="http://www.dongchunlin.com/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
</feed>
